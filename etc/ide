#!/usr/bin/env bash
Who="Tim Menzies"
When=2018
What="Lua development tools"
Lua="`which lua`"
Vim="/usr/local/bin/vim"
Head="# vim: set ts=2 sw=2 sts=2 expandtab:cindent:formatoptions+=crqt"

usage() { cat<<-EOF
	
	# Do this once:
	Edit the ide file, edit the first 8 lines.

	cd etc; chmod +x etc; ./etc setup

	# To call this code
	To run something:

	../etc/idea com
	
	For a list of commands, see

	../etc/ide help
	
	# If you want a handy shortcut...
	alias i="../etc/ide "
	
	EOF
}

# config. 

Ide=".."
Etc="$Ide/etc"
Docs="$Ide/docs"
Src="$Ide/src"
Tests="$Ide/tests"
Tmp="$Ide/tmp"

if [ ! -d "$Etc" ]; then 
  echo "Run this script command in a sub-directory below repository main directory"
  exit 1
fi

mkdir -p $Tmp

for d in $Docs $Etc $Src $Tests; do
  mkdir -p $d
  f="$d/README.md"
  if [ ! -f "$f" ]; then touch $f; git add $f; fi
done

setup1() {
  if [ ! -f "$2" ]; then $1 > $2; git add $2; fi
}
setup() { ## # setup files
 setup1 _readme    ../README.md
 setup1 _requires  ../requirements.txt
 setup1 _gitignore ../.gitignore
 setup1 _license   ../LICENSE.md
 setup1 _citation  ../CITATION.md
 setup1 _vimrc     $Tmp/vimrc
 setup1 _lib       $Src/lib.awk
 setup1 _contrib   ../CONTRIBUTING.md
}
hi() { ## # pull from repo
  git pull
}
bye() { ## # push to repo
  git commit -am 'new stuff'
  git push
  git status
}
blank() {  ## # Show an empty file
  cat<<-EOF
	$Head

	@include "gold"

EOF
}
_readme() { cat<<-EOF
	# Languagez.lua

	[![DOI](https://zenodo.org/badge/158887786.svg)](https://zenodo.org/badge/latestdoi/158887786)

	Mapping some generic languagez tools into lua.

	## Setup

	- **Zenodo:** need to  remove appplication restrictions at the organization level
	  https://github.com/organizations/languagez/settings/oauth_application_policy

EOF
}
_requires() { cat<<-EOF
	gawk>=4.1
EOF
}
# grab your favorite gitignore from https://github.com/github/gitignore
_gitignore() { cat<<-EOF
	tmp
	.awk
	
	## VIM STUFF
	# Swap
	[._]*.s[a-v][a-z]
	[._]*.sw[a-p]
	[._]s[a-rt-v][a-z]
	[._]ss[a-gi-z]
	[._]sw[a-p]
	
	# Session
	Session.vim
	
	# Temporary
	.netrwhist
	*~
	# Auto-generated tag files
	tags
	# Persistent undo
	[._]*.un~
EOF
}
_license() { cat<<-EOF
	# LICENSE

	Redistribution and use in source and binary forms, with or
	without modification, are permitted provided that the
	following conditions are met:
	
	1. Redistributions of source code must retain the above
	copyright notice, this list of conditions and the following
	disclaimer.
	
	2. Redistributions in binary form must reproduce the above
	copyright notice, this list of conditions and the following
	disclaimer in the documentation and/or other materials
	provided with the distribution.
	
	THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND
	CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
	INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
	MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
	CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
	SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
	NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
	LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
	HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
	CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
	OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
	SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
EOF
}
_citation() { 
	cat<<-EOF
	# CITATION

	Please cite this work as

	$Who, $When
	$What

	    @misc{languagez:gawk19,
	    	title  = "$What",
	    	author = "$Who",
	    	year   = "$When,
	    }
	
EOF
}
_contrib() { cat<<-EOF
	# Contributing
	
	When contributing to this repository, please first discuss
	the change you wish to make via issue, email, or any other
	method with the owners of this repository before making a
	change.
	
	Please note we have a code of conduct, please follow it in
	all your interactions with the project.
	
	## Pull Request Process
	
	1. Ensure any install or build dependencies are removed
	   before the end of the layer when doing a
	   build.
	2. Update the README.md with details of changes to the
	   interface, this includes new environment
	   variables, exposed ports, useful file locations and
	   container parameters.
	3. Increase the version numbers in any examples files and
	   the README.md to the new version that this
	   Pull Request would represent. The versioning scheme we
	   use is [SemVer](http://semver.org/).
	4. You may merge the Pull Request in once you have the
	   sign-off of two other developers, or if you
	   do not have permission to do that, you may request the
	   second reviewer to merge it for you.
	
	## Code of Conduct
	
	### Our Pledge
	
	In the interest of fostering an open and welcoming
	environment, we as contributors and maintainers pledge to
	making participation in our project and our community a
	harassment-free experience for everyone, regardless of age,
	body size, disability, ethnicity, gender identity and
	expression, level of experience, nationality, personal
	appearance, race, religion, or sexual identity and
	orientation.
	
	### Our Standards
	
	Examples of behavior that contributes to creating a positive
	environment include:
	
	* Using welcoming and inclusive language
	* Being respectful of differing viewpoints and experiences
	* Gracefully accepting constructive criticism
	* Focusing on what is best for the community
	* Showing empathy towards other community members
	
	Examples of unacceptable behavior by participants include:
	
	* The use of sexualized language or imagery and unwelcome
	  sexual attention or advances * Trolling,
	  insulting/derogatory comments, and personal or political
	  attacks * Public or private harassment * Publishing others'
	  private information, such as a physical or electronic
	  address, without explicit permission
	* Other conduct which could reasonably be considered
	  inappropriate in a
	  professional setting
	
	### Our Responsibilities
	
	Project maintainers are responsible for clarifying the
	standards of acceptable behavior and are expected to take
	appropriate and fair corrective action in response to any
	instances of unacceptable behavior.
	
	Project maintainers have the right and responsibility to
	remove, edit, or reject comments, commits, code, wiki edits,
	issues, and other contributions that are not aligned to this
	Code of Conduct, or to ban temporarily or permanently any
	contributor for other behaviors that they deem
	inappropriate, threatening, offensive, or harmful.
	
	### Scope
	
	This Code of Conduct applies both within project spaces and
	in public spaces when an individual is representing the
	project or its community. Examples of representing a project
	or community include using an official project e-mail
	address, posting via an official social media account, or
	acting as an appointed representative at an online or
	offline event. Representation of a project may be further
	defined and clarified by project maintainers.
	
	### Enforcement
	
	Instances of abusive, harassing, or otherwise unacceptable
	behavior may be reported by contacting the project team at
	[INSERT EMAIL ADDRESS]. All complaints will be reviewed and
	investigated and will result in a response that is deemed
	necessary and appropriate to the circumstances. The project
	team is obligated to maintain confidentiality with regard to
	the reporter of an incident.  Further details of specific
	enforcement policies may be posted separately.
	
	Project maintainers who do not follow or enforce the Code of
	Conduct in good faith may face temporary or permanent
	repercussions as determined by other members of the
	project's leadership.
	
	### Attribution
	
	This Code of Conduct is adapted from the [Contributor
	Covenant][homepage], version 1.4, available at
	[http://contributor-covenant.org/version/1/4][version]
	
	[homepage]: http://contributor-covenant.org
	[version]: http://contributor-covenant.org/version/1/4/
	
EOF
}
# end config
#---------------------------------
help() { ## # Show options.
  _banner
  printf "usage: ../etc/ide [com]\nwhere 'com' is one of\n\n"
  grep '{ ##' $0  | sort | gawk '
  BEGIN  {FS="#"}
  /grep/ { next}
         { gsub(/[^a-zA-Z0-9_]/,"",$1)
	   printf("  %-10s%-8s%s\n",$1,$3,$4)}'
  echo
}
_banner() { 
  red=$(tput setaf 1)
  blue=$(tput setaf 6)
  ltyl=$(tput setaf 11)
  white=$(tput setaf 15)
  tput setaf 11
  cat<<-'EOF'
	
	          ______          \'/
	      .-'` .    `'-.    -= * =-
	    .'  '    .---.  '.    /.\
	   /  '    .'     `'. \
	  ;  '    /          \|
	 :  '  _ ;            `
	;  :  /(\ \
	|  .       '.
	|  ' /     --'
	|  .   '.__\
	;  :       /
	 ;  .     |            ,
	  ;  .    \           /|
	   \  .    '.       .'/
	    '.  '  . `'---'`.'
	jgs   `'-..._____.-`
	
	EOF
   cat<<-EOF

	$What
	$Who, $When

	EOF
  tput setaf 6
}
_passfail() { 
  gawk '
    BEGIN        { f = p = 0 }
                 { print $0 }
    $2=="PASSED" { p++ }
    $2=="FAILED" { f++ }
    END          { 
      print "\n# :PASSED " p " :FAILED " f \
	    " :PERCENT " int(101*p/(p+f+0.0001))
      exit FAILED > 0
    }'
}
ok() { ## STEM # Run one file. If no arg, then run all.
  if [ -z "$1" ]; then
    for f in *ok.auk; do
	    run $(basename "$f" ".auk")
    done | _passfail
  else 
    if [ ! -f "${1}ok.auk" ]; then
	echo "#E> missing ${1}ok.auk"
	return 1
    fi
    run ${1}ok | _passfail
  fi  
}
_vimrc() { cat<<-EOF 
	set ruler
	set backupdir-=.
	set backupdir^=~/tmp,/tmp
	set nocompatible 
	filetype plugin indent on
	set modelines=3
	set scrolloff=3
	set autoindent
	set visualbell
	set backspace=indent,eol,start
	set laststatus=2
	set splitbelow
	set mouse=a
	set title
	set number
	autocmd BufEnter * silent! lcd %:p:h
	set nohlsearch
	set showmatch
	set matchtime=15
	set background=light     
	set syntax=on
	syntax enable
	set ignorecase
	set incsearch
	set smartcase
	set showmatch
	colorscheme zellner
	set statusline=%f\ 
	set statusline+=%2*\ %y\                   "FileType
	set statusline+=%4*\%{&ff}\                 "FileFormat (dos/unix..)
	set statusline+=%8*\ %=\ %l/%L\              "Rownumber/total (%)
	set statusline+=%9*\ %03c\                   "Colnr
	set statusline+=%0*\ \ %m%r%w\ %P\           "Modified? Readonly? Top/bot.
	EOF
}
vi() {
  $Vim -u "$Tmp/vimrc" $*
}
_gitting() {
  git config --global credential.helper cache
  git config credential.helper 'cache --timeout=3600'
}
push() { ## # Commit all, push to Github
  _gitting
  git status; git commit -am "commit"; git push
}
pull() { ## # Pull from Github
  _gitting
  git pull
}
###################################
# get all the configs (if any)


if [ `type -t $1`"" == 'function' ]; then
        f=$1
        shift
        $f "$@"
else
  help
fi
